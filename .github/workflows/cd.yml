name: CD

on:
  push:
    branches:
      - feature/AO-13-CICD-Pipeline
  workflow_dispatch:

concurrency:
  group: cd-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ghcr.io/${{ github.repository_owner }}/airops

jobs:
  build-and-push:
    name: Build and push images (${{ matrix.id }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - id: auth-service
            context: services/auth-service
            dockerfile: services/auth-service/Dockerfile
            port: 8090
          - id: flight-service
            context: services/flight-service
            dockerfile: services/flight-service/Dockerfile
            port: 8084
          - id: staff-service
            context: services/staff-service
            dockerfile: services/staff-service/Dockerfile
            port: 8083
          - id: chat-service
            context: services/chat-service
            dockerfile: services/chat-service/Dockerfile
            port: 8086
          - id: reporting-service
            context: services/reporting-service
            dockerfile: services/reporting-service/Dockerfile
            port: 8085
          - id: discovery
            context: services/discovery
            dockerfile: services/discovery/Dockerfile
            port: 8761
          - id: gateway
            context: services/gateway
            dockerfile: services/gateway/Dockerfile
            port: 8222
          - id: config-server
            context: services/config-server
            dockerfile: services/config-server/Dockerfile
            port: 8888
          - id: frontend
            context: airops-frontend
            dockerfile: airops-frontend/Dockerfile
            port: 3000
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.IMAGE_PREFIX }}-${{ matrix.id }}
          tags: |
            type=sha
            type=ref,event=branch
            type=raw,value=latest

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max


